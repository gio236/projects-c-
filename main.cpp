#include <ncurses.h>
#include <iostream>


/* mappa case */

int mappacase[20][40] = {
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,1,3,1,1,0,1,1,3,1,1,0,1,1,3,1,1,0,1,1,3,1,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,1,3,1,1,0,1,1,3,1,1,0,1,1,3,1,1,0,1,1,3,1,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
};


/* mappa case */


int x = 1;
int y = 1;


int ch;


void movmentnocollision(){

	ch = getch();


	if(ch == KEY_DOWN || ch == 's'){
		mvaddch(y, x, ' ');
		y++;
		mvaddch(y, x, '@');
		refresh();
	}else if(ch == KEY_UP || ch == 'w'){
		mvaddch(y, x, ' ');
		y--;
		mvaddch(y, x, '@');
		refresh();
	}else if(ch == KEY_LEFT || ch == 'a'){
		mvaddch(y, x, ' ');
		x--;
		mvaddch(y, x, '@');
		refresh();
	}else if(ch == KEY_RIGHT || ch == 'd'){
		mvaddch(y, x, ' ');
		x++;
		mvaddch(y, x, '@');
		refresh();
		}
	
}



/* mappa */
int mappa [20][40] = {
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1},
    {1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1},
    {1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1},
    {1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1},
    {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1},
    {1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1},
    {1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1},
    {1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1},
    {1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1},
    {1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1},
    {1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1},
    {1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1},
    {1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1},
    {1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1},
    {1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
};


/* mvmcolmap 
 
if(x == 1 && y == 20){
	system("clear");
	x = 1;
	y = 1;
	mvaddch(y, x, '@');				
	break;
} 


 mvmcolmap */



void mvmcolmapcas (){

		ch = getch();

			if(ch == KEY_DOWN || ch == 's'){
			mvaddch(y, x, ' ');
			y++;
			if (mappacase[y][x] == 1){
				y--;
				mvaddch(y, x, '@');				
			}else{
				mvaddch(y, x, '@');
				refresh();
			}
		}else if(ch == KEY_UP || ch == 'w'){
			mvaddch(y, x, ' ');
			y--;
			if (mappacase[y][x] == 1){			
				y++;
				mvaddch(y, x, '@');
			}else{
				mvaddch(y, x, '@');
				refresh();
			}
		}else if(ch == KEY_LEFT || ch == 'a'){
			mvaddch(y, x, ' ');
			x--;
			if (mappacase[y][x] == 1){			
				x++;
				mvaddch(y, x, '@');
			}else{
				mvaddch(y, x, '@');
				refresh();
			}
		}else if(ch == KEY_RIGHT || ch == 'd'){
			mvaddch(y, x, ' ');
			x++;
			if(mappacase[y][x] == 1){
				x--;
				mvaddch(y, x, '@');
			}else{
				mvaddch(y, x, '@');
				refresh();
			}
	  	}
}




void mvmcolmap (){

		ch = getch();

			if(ch == KEY_DOWN || ch == 's'){
			mvaddch(y, x, ' ');
			y++;
			if (mappa[y][x] == 1){
				y--;
				mvaddch(y, x, '@');				
			}else{
				mvaddch(y, x, '@');
				refresh();
			}
		}else if(ch == KEY_UP || ch == 'w'){
			mvaddch(y, x, ' ');
			y--;
			if (mappa[y][x] == 1){			
				y++;
				mvaddch(y, x, '@');
			}else{
				mvaddch(y, x, '@');
				refresh();
			}
		}else if(ch == KEY_LEFT || ch == 'a'){
			mvaddch(y, x, ' ');
			x--;
			if (mappa[y][x] == 1){			
				x++;
				mvaddch(y, x, '@');
			}else{
				mvaddch(y, x, '@');
				refresh();
			}
		}else if(ch == KEY_RIGHT || ch == 'd'){
			mvaddch(y, x, ' ');
			x++;
			if(mappa[y][x] == 1){
				x--;
				mvaddch(y, x, '@');
			}else{
				mvaddch(y, x, '@');
				refresh();
			}
	  	}
}

void labirinto(){
for (int i = 0;i < 20; i++){
	for (int n = 0;n < 40; n++){
		if (mappa[i][n] == 1){
			mvaddch(i, n, '#');
		}else{
			mvaddch(i, n, ' ');
		}
	}
}

refresh();


}

void mappacasaspawn(){
for (int i = 0;i < 20; i++){
	for (int n = 0;n < 40; n++){
		if (mappacase[i][n] == 1){
			mvaddch(i, n, '#');
			refresh();
		}else if (mappacase[i][n] == 3){
			mvaddch(i, n, '|');
			refresh();
		}else{
			mvaddch(i, n, ' ');
			refresh();
		}
	}
}



}

using namespace std;

int main(){

	initscr();
	noecho();
	keypad(stdscr, TRUE);//attivo tasti speciali
	curs_set(0);




	mvaddch(y, x, '@');


	labirinto();

	while(true){

 
	if(x == 1 && y == 20){
		clear();
		x = 1;
		y = 1;
		mvaddch(y, x, '@');				
		break;
	}	 


		mvmcolmap();
	}



	mappacasaspawn();

	y = 2;
	x = 1;

	while(true){


		mvmcolmapcas();

		if(x == 1 && y == 1){
			clear();
			x = 1;
			y = 19;
			labirinto();
			refresh();
			mvaddch(y, x, '@');
			while(true){
				mvmcolmap();
					if(x == 1 && y == 20){
						clear();
						mappacasaspawn();
						x = 1;
						y = 1;
						mvaddch(y, x, '@');				
						break;
					}	 
			}
		}    


		if (ch == 'q') break;
	}

	refresh();
	endwin();
}
